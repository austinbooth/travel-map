{"version":3,"sources":["token.js","images/red-pin.png","components/LocationForm.tsx","api.ts","components/Map.tsx","App.tsx","index.tsx"],"names":["exports","MAPBOX_TOKEN","OPENCAGE_TOKEN","module","LocationForm","props","locationInputRef","useRef","useState","inputLocation","setInputLocation","suggestions","setSuggestions","activeSuggestion","setActiveSuggestion","useEffect","current","selectionStart","value","length","selectionEnd","clearFormAndChangeMapLocation","location","placename","request_url","axios","get","then","res","data","results","geometry","coords","api","lat","lng","setCoords","onSuggestionClick","event","selectedLocation","currentTarget","innerHTML","onMouseHover","optionHoveredOver","indexOfOptionHoveredOver","indexOf","className","onSubmit","preventDefault","type","id","name","ref","onChange","entered","target","possibleOptions","filter","toLowerCase","includes","unshift","onKeyDown","keyPressed","key","currentActiveSuggestion","map","option","index","onClick","onMouseEnter","undefined","visited","latitude","longitude","images","src","alt","Map","pinData","pin","offsetTop","offsetLeft","setPopupInfo","redPin","viewport","onViewportChange","setViewport","mapboxApiAccessToken","popupInfo","find","info","console","log","tipSize","anchor","closeOnClick","onClose","popUp","App","width","height","zoom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d2382e5.chunk.js","sourcesContent":["exports.MAPBOX_TOKEN = \"pk.eyJ1IjoiYXVzdGluYm9vdGgiLCJhIjoiY2tmemd3YWxqMDFubTJyc2RkbHU1ZXNteiJ9.um0aocbu9wQQsJaFVZ4S2Q\";\n\nexports.OPENCAGE_TOKEN = \"189c92f4944e4970a5bfa2a830d79032\";\n","module.exports = __webpack_public_path__ + \"static/media/red-pin.43ca6b14.png\";","import React, { useRef, useState, useEffect } from \"react\";\nimport * as api from \"../api\";\n\ninterface LocationFormProps {\n  setCoords: (latitude: number, longitude: number) => void;\n}\n\nconst LocationForm: React.FC<LocationFormProps> = (props) => {\n  const locationInputRef = useRef<HTMLInputElement>(null);\n  const [inputLocation, setInputLocation] = useState(\"\");\n  const [suggestions, setSuggestions] = useState<Array<string> | null>(null);\n  const [activeSuggestion, setActiveSuggestion] = useState<number>(0);\n\n  useEffect(() => {\n    if (inputLocation) {\n      // set input element cursor position to the end\n      locationInputRef.current!.selectionStart = locationInputRef.current!.value.length;\n      locationInputRef.current!.selectionEnd = locationInputRef.current!.value.length;\n    }\n  });\n\n  useEffect(() => {\n    // ensure that if the input text is deleted, the active suggestion is reset to 0\n    if (!suggestions) setActiveSuggestion(0);\n  }, [suggestions]);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    clearFormAndChangeMapLocation(inputLocation);\n  };\n\n  const clearFormAndChangeMapLocation = (location: string) => {\n    setInputLocation(\"\");\n    // const location = locationInputRef.current!.value;\n    api\n      .getLatLngFromName(location)\n      .then(({ lat, lng }) => props.setCoords(lat, lng));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const entered = event.target.value;\n\n    const locations = [\"Prague\", \"Berlin\", \"Paris\", \"St Petersburg\", \"Split\"];\n    // const inputText = locationInputRef.current!.value;\n    const possibleOptions = locations.filter((location) =>\n      location.toLowerCase().includes(entered.toLowerCase())\n    );\n    possibleOptions.unshift(entered); // add whatever the user has typed as the first option\n    if (entered.length === 0) setSuggestions(null);\n    else setSuggestions(possibleOptions);\n    setInputLocation(entered);\n  };\n\n  const onSuggestionClick = (event: React.MouseEvent<HTMLElement>) => {\n    const selectedLocation = event.currentTarget.innerHTML;\n\n    setInputLocation(selectedLocation);\n    clearFormAndChangeMapLocation(selectedLocation);\n    setSuggestions(null);\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent) => {\n    if (suggestions === null) return;\n    const { key: keyPressed } = event;\n\n    if (keyPressed === \"ArrowUp\") {\n      // decrement\n      setActiveSuggestion((currentActiveSuggestion) => {\n        return currentActiveSuggestion > 0 ? currentActiveSuggestion - 1 : 0;\n      });\n      setInputLocation(suggestions![activeSuggestion - 1]);\n    }\n    if (keyPressed === \"ArrowDown\") {\n      // increment\n      setActiveSuggestion((currentActiveSuggestion) =>\n        currentActiveSuggestion < suggestions!.length - 1\n          ? currentActiveSuggestion + 1\n          : suggestions!.length - 1\n      );\n      setInputLocation(suggestions![activeSuggestion + 1]);\n    }\n    if (keyPressed === \"Enter\") {\n      if (suggestions.length > 0)\n        setInputLocation(suggestions![activeSuggestion]);\n      setActiveSuggestion(0);\n      setSuggestions(null);\n    }\n  };\n\n  const onMouseHover = (event: React.MouseEvent<HTMLElement>) => {\n    const optionHoveredOver = event.currentTarget.innerHTML;\n    const indexOfOptionHoveredOver = suggestions!.indexOf(optionHoveredOver);\n    setActiveSuggestion(indexOfOptionHoveredOver);\n    setInputLocation(optionHoveredOver);\n  };\n\n  return (\n    <div className=\"form-and-suggestions-container\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          id=\"location\"\n          name=\"location\"\n          ref={locationInputRef}\n          onChange={handleChange}\n          onKeyDown={handleKeyPress}\n          value={inputLocation}\n        ></input>\n        <button type=\"submit\">Find</button>\n        {suggestions && (\n          <ul className=\"suggestions\">\n            {suggestions.map((option, index) => (\n              <li\n                key={option}\n                onClick={onSuggestionClick}\n                onMouseEnter={onMouseHover}\n                className={\n                  index === activeSuggestion ? \"active-suggestion\" : undefined\n                }\n              >\n                {option}\n              </li>\n            ))}\n          </ul>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default LocationForm;\n","import axios from \"axios\";\nimport { OPENCAGE_TOKEN } from \"./token\";\n\nexport const getLatLngFromName = (\n  placename: string\n): Promise<{ lat: number; lng: number }> => {\n  const api_url = \"https://api.opencagedata.com/geocode/v1/json\";\n  const request_url = `${api_url}?key=${OPENCAGE_TOKEN}&q=${placename}`;\n\n  return axios\n    .get(request_url)\n    .then((res) => res.data.results[0].geometry)\n    .then((coords) => coords);\n};\n","import React from \"react\";\nimport MapGL, { Marker, Popup } from \"react-map-gl\";\nimport { MAPBOX_TOKEN } from \"../token\";\nimport redPin from \"../images/red-pin.png\";\n\nconst visited = [\n  {\n    name: \"Prague\",\n    latitude: 50.0755,\n    longitude: 14.4378,\n    images: [\n      {\n        src:\n          \"https://firebasestorage.googleapis.com/v0/b/travel-map-6fc3a.appspot.com/o/color_wheel_4_background.svg?alt=media&token=5e3ac8c6-fa5f-424c-a7d7-4de0c387b3ef\",\n        alt: \"Image alt text\",\n      },\n    ],\n  },\n  {\n    name: \"Berlin\",\n    latitude: 52.52,\n    longitude: 13.405,\n    images: [\n      {\n        src:\n          \"https://firebasestorage.googleapis.com/v0/b/travel-map-6fc3a.appspot.com/o/color_wheel_4_background.svg?alt=media&token=5e3ac8c6-fa5f-424c-a7d7-4de0c387b3ef\",\n        alt: \"Image alt text\",\n      },\n    ],\n  },\n];\n\ninterface Viewport {\n  width: number;\n  height: number;\n  latitude: number;\n  longitude: number;\n  zoom: number;\n}\n\ninterface MapProps {\n  viewport: {\n    width: number;\n    height: number;\n    latitude: number;\n    longitude: number;\n    zoom: number;\n  };\n  setViewport: (viewport: Viewport) => void;\n  popupInfo: string | null;\n  setPopupInfo: (location: string | null) => void;\n}\n\nconst Map: React.FC<MapProps> = (props) => {\n  const pinData = visited.map((pin) => (\n    <Marker\n      key={pin.name}\n      longitude={pin.longitude}\n      latitude={pin.latitude}\n      offsetTop={-25}\n      offsetLeft={-15}\n    >\n      <div className=\"pin\" onClick={() => props.setPopupInfo(pin.name)}>\n        <img src={redPin} alt={\"pin\"} />\n      </div>\n    </Marker>\n  ));\n\n  const popUp = (find: string) => {\n    const info = visited.filter((location) => location.name === find)[0];\n    console.log(info.name);\n    return (\n      <Popup\n        tipSize={5}\n        anchor=\"top\"\n        latitude={info.latitude}\n        longitude={info.longitude}\n        closeOnClick={false}\n        onClose={() => props.setPopupInfo(null)}\n      >\n        {info.name}\n        <img src={info.images[0].src} alt={info.images[0].alt}></img>\n      </Popup>\n    );\n  };\n\n  return (\n    <div className=\"map-container\">\n      <MapGL\n        {...props.viewport}\n        onViewportChange={(viewport) => props.setViewport(viewport)}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n      >\n        {pinData}\n        {props.popupInfo && popUp(props.popupInfo)}\n      </MapGL>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport LocationForm from \"./components/LocationForm\";\nimport Map from \"./components/Map\";\n\ninterface Viewport {\n  width: number;\n  height: number;\n  latitude: number;\n  longitude: number;\n  zoom: number;\n}\n\nconst App = () => {\n  const [viewport, setViewport] = useState<Viewport>({\n    width: 800,\n    height: 400,\n    latitude: 23,\n    longitude: 0,\n    zoom: 1,\n  });\n\n  const [popupInfo, setPopupInfo] = useState<string | null>(null);\n\n  const setCoords = (latitude: number, longitude: number) => {\n    setViewport({ ...viewport, latitude, longitude, zoom: 8 });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Travel Map</h1>\n      </header>\n      <LocationForm setCoords={setCoords} />\n      <Map\n        viewport={viewport}\n        setViewport={setViewport}\n        popupInfo={popupInfo}\n        setPopupInfo={setPopupInfo}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}